{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "18239731932083080786"
    }
  },
  "parameters": {
    "clientId": {
      "type": "string",
      "metadata": {
        "description": "The Entra ID client ID used for authentication."
      }
    },
    "resourceLabel": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id)]",
      "minLength": 3,
      "maxLength": 30,
      "metadata": {
        "description": "Optional suffix used for naming Azure resources and as the public DNS label. Must be alphanumeric and lowercase. If not provided, one is derived from the resource group name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure region for resource deployment. Defaults to the resource group location."
      }
    }
  },
  "variables": {
    "aksName": "[format('mg-aks-{0}', parameters('resourceLabel'))]",
    "acrName": "[format('mgreg{0}', parameters('resourceLabel'))]",
    "cosmosDbAccountName": "[format('mg-storage-{0}', parameters('resourceLabel'))]",
    "userAssignedIdentityName": "[format('mg-identity-{0}', parameters('resourceLabel'))]",
    "appInsightsName": "[format('mg-ai-{0}', parameters('resourceLabel'))]",
    "vnetName": "[format('mg-vnet-{0}', parameters('resourceLabel'))]",
    "aksSubnetName": "[format('mg-aks-subnet-{0}', parameters('resourceLabel'))]",
    "appGwSubnetName": "[format('mg-aag-subnet-{0}', parameters('resourceLabel'))]",
    "appGwName": "[format('mg-aag-{0}', parameters('resourceLabel'))]",
    "publicIpName": "[format('mg-pip-{0}', parameters('resourceLabel'))]",
    "federatedCredName": "[format('mg-sa-federation-{0}', parameters('resourceLabel'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-07-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('aksSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24"
            }
          },
          {
            "name": "[variables('appGwSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', variables('vnetName'))]",
      "name": "[guid(variables('vnetName'), variables('aksName'), variables('aksSubnetName'), 'network-contributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksName')), '2023-04-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-01-01-preview",
      "name": "[variables('acrName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          }
        },
        "publicNetworkAccess": "Enabled",
        "anonymousPullEnabled": false,
        "networkRuleBypassOptions": "AzureServices",
        "dataEndpointEnabled": false,
        "adminUserEnabled": false
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2023-04-01",
      "name": "[variables('aksName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "dnsPrefix": "[variables('aksName')]",
        "agentPoolProfiles": [
          {
            "name": "nodepool1",
            "count": 2,
            "vmSize": "Standard_D4ds_v5",
            "osType": "Linux",
            "mode": "System",
            "osSKU": "Ubuntu",
            "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('aksSubnetName'))]"
          }
        ],
        "enableRBAC": true,
        "aadProfile": {
          "managed": true,
          "enableAzureRBAC": true
        },
        "networkProfile": {
          "networkPlugin": "azure",
          "loadBalancerSku": "standard",
          "serviceCidr": "192.168.0.0/16",
          "dnsServiceIP": "192.168.0.10"
        },
        "addonProfiles": {},
        "apiServerAccessProfile": {
          "enablePrivateCluster": false
        },
        "oidcIssuerProfile": {
          "enabled": true
        },
        "securityProfile": {
          "workloadIdentity": {
            "enabled": true
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerService/managedClusters', variables('aksName')), resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), 'acrpull')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksName')), '2023-04-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-05-01",
      "name": "[variables('publicIpName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('resourceLabel')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2022-09-01",
      "name": "[variables('appGwName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "Standard_v2",
          "tier": "Standard_v2",
          "capacity": 1
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGwIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appGwSubnetName'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGwFrontendIP",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "httpPort",
            "properties": {
              "port": 80
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "aksBackendPool",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "10.0.1.100"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "httpSettings",
            "properties": {
              "port": 8000,
              "protocol": "Http",
              "pickHostNameFromBackendAddress": false,
              "requestTimeout": 20,
              "probe": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('appGwName'), 'mcpgateway-probe')]"
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "httpListener",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGwName'), 'appGwFrontendIP')]"
              },
              "frontendPort": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGwName'), 'httpPort')]"
              },
              "protocol": "Http"
            }
          }
        ],
        "requestRoutingRules": [
          {
            "name": "rule1",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGwName'), 'httpListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGwName'), 'aksBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGwName'), 'httpSettings')]"
              },
              "priority": 100
            }
          }
        ],
        "probes": [
          {
            "name": "mcpgateway-probe",
            "properties": {
              "protocol": "Http",
              "host": "10.0.1.100",
              "path": "/ping",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-399"
                ]
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[variables('userAssignedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}-admin', variables('userAssignedIdentityName'))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', variables('aksName'))]",
      "name": "[guid(variables('aksName'), format('{0}-admin', variables('userAssignedIdentityName')), 'AKSContributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-admin', variables('userAssignedIdentityName'))), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-admin', variables('userAssignedIdentityName')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', variables('aksName'))]",
      "name": "[guid(variables('aksName'), format('{0}-admin', variables('userAssignedIdentityName')), 'AKSRBACAdmin')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-admin', variables('userAssignedIdentityName'))), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-admin', variables('userAssignedIdentityName')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}/{1}', variables('userAssignedIdentityName'), variables('federatedCredName'))]",
      "properties": {
        "audiences": [
          "api://AzureADTokenExchange"
        ],
        "issuer": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksName')), '2023-04-01').oidcIssuerProfile.issuerURL]",
        "subject": "system:serviceaccount:adapter:mcpgateway-sa"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[variables('cosmosDbAccountName')]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ],
        "capabilities": [],
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "enableFreeTier": false
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}', variables('cosmosDbAccountName'), 'McpGatewayDb')]",
      "properties": {
        "resource": {
          "id": "McpGatewayDb"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosDbAccountName'), 'McpGatewayDb', 'AdapterContainer')]",
      "properties": {
        "resource": {
          "id": "AdapterContainer",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), 'McpGatewayDb')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2023-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosDbAccountName'), 'McpGatewayDb', 'CacheContainer')]",
      "properties": {
        "resource": {
          "id": "CacheContainer",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), 'McpGatewayDb')]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
      "apiVersion": "2022-11-15",
      "name": "[format('{0}/{1}', variables('cosmosDbAccountName'), guid(variables('cosmosDbAccountName'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), 'data-contributor'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', variables('cosmosDbAccountName'), '00000000-0000-0000-0000-000000000002')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2023-01-31').principalId]",
        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "kubernetesDeployment",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-admin', variables('userAssignedIdentityName'))))]": {}
        }
      },
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.60.0",
        "timeout": "PT30M",
        "retentionInterval": "P1D",
        "scriptContent": "      sed -i \"s|\\${AZURE_CLIENT_ID}|$AZURE_CLIENT_ID|g\" cloud-deployment-template.yml\r\n      sed -i \"s|\\${TENANT_ID}|$TENANT_ID|g\" cloud-deployment-template.yml\r\n      sed -i \"s|\\${CLIENT_ID}|$CLIENT_ID|g\" cloud-deployment-template.yml\r\n      sed -i \"s|\\${APPINSIGHTS_CONNECTION_STRING}|$APPINSIGHTS_CONNECTION_STRING|g\" cloud-deployment-template.yml\r\n      sed -i \"s|\\${IDENTIFIER}|$IDENTIFIER|g\" cloud-deployment-template.yml\r\n\r\n      az aks command invoke -g $ResourceGroupName -n mg-aks-\"$ResourceGroupName\" --command \"kubectl apply -f cloud-deployment-template.yml\" --file cloud-deployment-template.yml\r\n    ",
        "supportingScriptUris": [
          "https://raw.githubusercontent.com/microsoft/mcp-gateway/refs/heads/llx18/cd1/deployment/k8s/cloud-deployment-template.yml"
        ],
        "environmentVariables": [
          {
            "name": "CLIENT_ID",
            "value": "[parameters('clientId')]"
          },
          {
            "name": "AZURE_CLIENT_ID",
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName')), '2023-01-31').clientId]"
          },
          {
            "name": "APPINSIGHTS_CONNECTION_STRING",
            "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
          },
          {
            "name": "ResourceGroupName",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "IDENTIFIER",
            "value": "[parameters('resourceLabel')]"
          },
          {
            "name": "TENANT_ID",
            "value": "[tenant().tenantId]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-admin', variables('userAssignedIdentityName')))]"
      ]
    }
  ]
}